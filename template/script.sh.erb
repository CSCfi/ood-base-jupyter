#!/usr/bin/env bash

# Benchmark info
echo "TIMING - Starting main script at: $(date)"

# Set working directory to home directory
cd "${HOME}"

#
# Start Jupyter Notebook Server
#
#
# Purge the module environment to avoid conflicts
module purge

<% python_module = "" %>
<% if context.python_module == "Custom" -%>
  <% python_module = context.custom_module %>
<%- else -%>
  <% python_module = context.python_module %>
<%- end -%>


# Adds the full bin directory for the 
<% if context.python_module == "CustomPath" -%>
    export PATH="$(dirname <%= context.custom_path %>):$PATH"
    echo "USING CUSTOM PYTHON"
<%- else -%>
    module load <%= python_module %>
    echo "Loading module"
<%- end -%>

# List loaded modules
module list

<% if context.enable_venv == "1" && !context.venv.blank? -%>

  # Verify that venv is not in home folder
  root_dir=$(readlink -m "<%= context.venv -%>" | cut -d "/" -f2)
  if [[ "$root_dir" != "scratch" && "$root_dir" != "projappl" && "$root_dir" != fmi ]]; then
    echo "Virtual environment needs to be in /scratch/ or /projappl/" | tee "<%= session.staged_root.join("job_exit_reason") -%>"
    scancel "$SLURM_JOB_ID"
    exit 1
  fi

  if [[ -f "<%= context.venv -%>/bin/activate" ]]; then
    echo "Activating venv at <%= context.venv -%>"
    source "<%= context.venv -%>/bin/activate"
  else
    echo "Creating new venv at <%= context.venv %>"
    # Use python3.9 to create the venv if using system python
    <% if context.python_module == "Custom" -%>
      python=$(which python3)
      if [[ $python == /usr/bin/python3 ]]; then 
        python=/usr/bin/python3.9; 
      fi
    <% else -%>
      python=$(which python)
    <% end %>

    # --system-site-packages does not work properly with the module system
    # packages from the module are added if module is loaded when activating venv
    error_msg=$($python -m venv "<%= context.venv -%>" --system-site-packages 2>&1 > /dev/null)
    return_code="$?"
    if [[ ! "$return_code" -eq 0 ]];then
      echo "Could not create venv: $error_msg" | tee "<%= session.staged_root.join("job_exit_reason") -%>"
      scancel "$SLURM_JOB_ID"
      exit 1
    fi

    echo "Activating created venv at <%= context.venv -%>"

    source "<%= context.venv -%>/bin/activate"

    # Install jupyterlab if there is no jupyter installed (system python only)
    <% if context.python_user_site == "0" -%>
    export PYTHONNOUSERSITE="TRUE"
    <% end -%>
    if [[ ! $(command -v jupyter) ]]; then
      echo "Installing jupyterlab"
      python -m pip install jupyterlab
    fi

    fi

  # Install kernel that points to the venv python
  python -m ipykernel install --prefix="<%= context.venv -%>" --name="python3" --display-name="Python 3 (venv)"

  # Set JUPYTER_DATA_DIR to find kernels from this venv
  export JUPYTER_DATA_DIR="<%= context.venv -%>/share/jupyter"
<% end -%>

<% if context.python_user_site == "0" -%>
  echo "Disabling user packages"
  export PYTHONNOUSERSITE="TRUE"
  # pytorch is known to require enabled user packages to find Jupyter, do a quick test for other modules
  if ! $(PYTHONNOUSERSITE="TRUE" python -c 'import jupyter' > /dev/null 2>&1); then
    if $(unset PYTHONNOUSERSITE; python -c 'import jupyter' > /dev/null 2>&1); then
      echo "Jupyter is installed only in user packages but user packages are disabled"
    fi
  fi
<% elsif !context.python_user_base.blank? -%>
  echo "Using <%= context.python_user_base -%> for user packages"
  mkdir -p "<%= context.python_user_base -%>"
  unset PYTHONNOUSERSITE
  export PYTHONUSERBASE="<%= context.python_user_base -%>"
<% end -%>

jp_type="lab"
# Check if JupyterLab version is higher than 3.0.0
has_jupyterlab=$(python -c 'from packaging import version;import jupyterlab; print(version.parse(jupyterlab.__version__) >= version.parse("3.0.0"))')
if [[ "$has_jupyterlab" == "True" ]]; then
  # Some modules don't have the extensions enabled, enable them for user
  python -m jupyter server extension enable --user --py nbclassic
  python -m jupyter server extension enable --user --py jupyterlab
else
  # Fall back to notebook if Jupyter Lab isn't installed or too old version
  sed -i 's/\.ServerApp\./.NotebookApp./g' $CONFIG_FILE
  sed -i 's/\.root_dir/.notebook_dir/g' $CONFIG_FILE
  jp_type="notebook"
fi

# Benchmark info
echo "TIMING - Starting jupyter at: $(date)"
# Launch the Jupyter Notebook Server
set -x
echo "PATH IS: $PATH"
echo "PYTHON FROM $(which python)" 
python -m jupyter $jp_type --config="${CONFIG_FILE}" <%= context.extra_jupyter_args %>

exit_code=$?
if [ $exit_code -ne 0 ]; then
  echo "python exited with status $exit_code"
  if (tail -20 "<%= session.staged_root.join("output.log") %>" | grep -q JSONDecodeError) ; then
    if [ "$(find $HOME/.jupyter -type f -empty -iname '*.json' | wc -l)" -gt 0 ]; then
      echo "Could not launch Jupyter. Please back up and delete $HOME/.jupyter and try again." | tee "<%= session.staged_root.join("job_exit_reason") -%>"
      scancel "$SLURM_JOB_ID"
      exit $exit_code
    fi
  fi
fi
