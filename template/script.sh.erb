#!/usr/bin/env bash

# Benchmark info
echo "TIMING - Starting main script at: $(date)"

# Set working directory to home directory
cd "${HOME}"

#
# Start Jupyter Notebook Server
#

<%- unless context.python_module.blank? || context.python_module == "System" -%>
# Purge the module environment to avoid conflicts
module purge

# Load the require modules
module load <%= context.python_module %>
<%- end -%>

<% unless context.extra_modules.blank? -%>
# Load extra modules
module load <%= context.extra_modules %>
<% end -%>

# List loaded modules
module list

# Only enable advanced functionality if checkbox is checked
<% if context.advanced == "1" -%>
  <% if context.custom_environment == "venv" && !context.venv.blank? -%>

    # Check if Python installation is inside Singularity container
    PY_INT_REF=$(dirname $(python -c 'import sys;print(sys.executable)'))
    PY_EXT_REF=$(dirname $(which python))
    if [[ ! $PY_INT_REF == $PY_EXT_REF  ]];then
      echo "Python installation is in Singularity container"
      # Need to save this before venv is activated
      extra_pythonpath=$(python -c 'import site;print(":".join(site.getsitepackages()))')
    fi

    # Verify that venv is not in home folder
    root_dir=$(readlink -m "<%= context.venv -%>" | cut -d "/" -f2)
    if [[ "$root_dir" != "scratch" && "$root_dir" != "projappl" && "$root_dir" != fmi ]]; then
      echo "Virtual environment needs to be in /scratch/ or /projappl"
      exit 1
    fi
    if [[ -f "<%= context.venv -%>/bin/activate" ]]; then
      echo "Activating venv at <%= context.venv -%>"
      source "<%= context.venv -%>/bin/activate"

      # Add the container site-packages to python path
      if [[ ! $PY_INT_REF == $PY_EXT_REF  ]];then
        SINGULARITYENV_PYTHONPATH="$SINGULARITYENV_PYTHONPATH:$extra_pythonpath"
      fi
    else
      echo "Creating new venv at <%= context.venv %>"
      # Use python3 to create the venv if using system python
      <% if context.python_module == "System" -%>
      python=$(which python3)
      <% else -%>
      python=$(which python)
      <% end %>

      # --system-site-packages does not work properly with the module system
      # packages from the module are added if module is loaded when activating venv
      $python -m venv "<%= context.venv -%>" # <%# "--system-site-packages" if context.venv_system_site_packages == "1" %>

      echo "Activating created venv at <%= context.venv -%>"

      source "<%= context.venv -%>/bin/activate"

      # Fix python executables for Singularity installations
      if [[ ! $PY_INT_REF == $PY_EXT_REF ]];then
        # containers like geoconda, python-data/3.9-1
        if grep -q "/CSC_SING_INST" "$PY_EXT_REF/python"; then
          # Replace venv symlink with wrapper script for python
          cp --remove-destination "$PY_EXT_REF/python" "<%= context.venv -%>/bin/python"

          # Fix wrapper script so that DIR is set correctly to find common.sh
          # Set script to execute the symlink in this venv instead of executing container python
          sed -i "s@DIR=\"@DIR=${PY_EXT_REF}\n#DIR=@g" "<%= context.venv -%>/bin/python"
          sed -i "s@${PY_INT_REF}/python@<%= context.venv -%>/bin/python_cont@g" "<%= context.venv -%>/bin/python"

          # Create symlink to container python
          ln -fs "$PY_INT_REF/python" "<%= context.venv -%>/bin/python_cont"
        # containers like pytorch, tensorflow
        elif grep -q 'singularity_wrapper exec $(basename "$0")' "$PY_EXT_REF/python"; then
          # Replace venv symlink with wrapper script for python
          cp --remove-destination "$PY_EXT_REF/python" "<%= context.venv -%>/bin/python"

          # Set script to execute the symlink in this venv instead of executing container python
          sed -i "s@exec \$(basename \"\$0\")@exec <%= context.venv -%>/bin/python_cont@g" "<%= context.venv -%>/bin/python"

          # Create symlink to container python
          ln -fs "$PY_INT_REF/python" "<%= context.venv -%>/bin/python_cont"
        else
          echo "Unknown Python environment container"
        fi
        # Add the container site-packages to python path
        SINGULARITYENV_PYTHONPATH="$SINGULARITYENV_PYTHONPATH:$extra_pythonpath"
      fi

      # Install jupyterlab if there is no jupyter installed (system python only)
      if [[ ! $(command -v jupyter) ]]; then
        echo "Installing jupyterlab"
        python -m pip install jupyterlab
      fi

      # Install kernel that points to the venv python
      python -m ipykernel install --prefix="<%= context.venv -%>" --name="python3" --display-name="Python 3"
    fi

    # Set JUPYTER_DATA_DIR to find kernels from this venv
    export JUPYTER_DATA_DIR="<%= context.venv -%>/share/jupyter"
  <% end -%>

  <% if context.python_user_site == "0" -%>
    export PYTHONNOUSERSITE="TRUE"
  <% end -%>
<% end -%>


# Benchmark info
echo "TIMING - Starting jupyter at: $(date)"
# Launch the Jupyter Notebook Server
set -x
python -m jupyter <%= context.jp_type %> --config="${CONFIG_FILE}" <%= context.extra_jupyter_args %>
